/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    LegalGame: {
      address: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "caseId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "player",
              type: "address",
            },
            {
              indexed: false,
              internalType: "string",
              name: "caseTitle",
              type: "string",
            },
          ],
          name: "CaseCreated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "caseId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "evidenceId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "submitter",
              type: "address",
            },
          ],
          name: "EvidenceSubmitted",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "caseId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "string",
              name: "newPhase",
              type: "string",
            },
          ],
          name: "PhaseChanged",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "caseId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "string",
              name: "verdict",
              type: "string",
            },
          ],
          name: "VerdictReached",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "caseEvidence",
          outputs: [
            {
              internalType: "uint256",
              name: "evidenceId",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "description",
              type: "string",
            },
            {
              internalType: "bool",
              name: "isValid",
              type: "bool",
            },
            {
              internalType: "uint256",
              name: "impactScore",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "cases",
          outputs: [
            {
              internalType: "uint256",
              name: "caseId",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "caseTitle",
              type: "string",
            },
            {
              internalType: "string",
              name: "caseDescription",
              type: "string",
            },
            {
              internalType: "address",
              name: "player",
              type: "address",
            },
            {
              internalType: "address",
              name: "opponent",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "playerScore",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "opponentScore",
              type: "uint256",
            },
            {
              internalType: "bool",
              name: "isActive",
              type: "bool",
            },
            {
              internalType: "string",
              name: "currentPhase",
              type: "string",
            },
            {
              internalType: "string",
              name: "verdict",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_caseTitle",
              type: "string",
            },
            {
              internalType: "string",
              name: "_caseDescription",
              type: "string",
            },
          ],
          name: "createCase",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_caseId",
              type: "uint256",
            },
          ],
          name: "getCase",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "caseId",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "caseTitle",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "caseDescription",
                  type: "string",
                },
                {
                  internalType: "address",
                  name: "player",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "opponent",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "playerScore",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "opponentScore",
                  type: "uint256",
                },
                {
                  internalType: "bool",
                  name: "isActive",
                  type: "bool",
                },
                {
                  internalType: "string",
                  name: "currentPhase",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "verdict",
                  type: "string",
                },
              ],
              internalType: "struct LegalGame.Case",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_caseId",
              type: "uint256",
            },
          ],
          name: "getCaseEvidence",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "evidenceId",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "description",
                  type: "string",
                },
                {
                  internalType: "bool",
                  name: "isValid",
                  type: "bool",
                },
                {
                  internalType: "uint256",
                  name: "impactScore",
                  type: "uint256",
                },
              ],
              internalType: "struct LegalGame.Evidence[]",
              name: "",
              type: "tuple[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_player",
              type: "address",
            },
          ],
          name: "getPlayerCases",
          outputs: [
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "playerCases",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_caseId",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "_verdict",
              type: "string",
            },
          ],
          name: "reachVerdict",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_caseId",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "_description",
              type: "string",
            },
            {
              internalType: "bool",
              name: "_isValid",
              type: "bool",
            },
          ],
          name: "submitEvidence",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_caseId",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "_newPhase",
              type: "string",
            },
          ],
          name: "updatePhase",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
    YourContract: {
      address: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "greetingSetter",
              type: "address",
            },
            {
              indexed: false,
              internalType: "string",
              name: "newGreeting",
              type: "string",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "premium",
              type: "bool",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "GreetingChange",
          type: "event",
        },
        {
          inputs: [],
          name: "greeting",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "premium",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_newGreeting",
              type: "string",
            },
          ],
          name: "setGreeting",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "totalCounter",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "userGreetingCounter",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "withdraw",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          stateMutability: "payable",
          type: "receive",
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
